// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"code.cloudfoundry.org/cf-k8s-api/apis"
	"code.cloudfoundry.org/cf-k8s-api/repositories"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type CFRouteRepository struct {
	FetchRouteStub        func(client.Client, string) (repositories.RouteRecord, error)
	fetchRouteMutex       sync.RWMutex
	fetchRouteArgsForCall []struct {
		arg1 client.Client
		arg2 string
	}
	fetchRouteReturns struct {
		result1 repositories.RouteRecord
		result2 error
	}
	fetchRouteReturnsOnCall map[int]struct {
		result1 repositories.RouteRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFRouteRepository) FetchRoute(arg1 client.Client, arg2 string) (repositories.RouteRecord, error) {
	fake.fetchRouteMutex.Lock()
	ret, specificReturn := fake.fetchRouteReturnsOnCall[len(fake.fetchRouteArgsForCall)]
	fake.fetchRouteArgsForCall = append(fake.fetchRouteArgsForCall, struct {
		arg1 client.Client
		arg2 string
	}{arg1, arg2})
	stub := fake.FetchRouteStub
	fakeReturns := fake.fetchRouteReturns
	fake.recordInvocation("FetchRoute", []interface{}{arg1, arg2})
	fake.fetchRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFRouteRepository) FetchRouteCallCount() int {
	fake.fetchRouteMutex.RLock()
	defer fake.fetchRouteMutex.RUnlock()
	return len(fake.fetchRouteArgsForCall)
}

func (fake *CFRouteRepository) FetchRouteCalls(stub func(client.Client, string) (repositories.RouteRecord, error)) {
	fake.fetchRouteMutex.Lock()
	defer fake.fetchRouteMutex.Unlock()
	fake.FetchRouteStub = stub
}

func (fake *CFRouteRepository) FetchRouteArgsForCall(i int) (client.Client, string) {
	fake.fetchRouteMutex.RLock()
	defer fake.fetchRouteMutex.RUnlock()
	argsForCall := fake.fetchRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CFRouteRepository) FetchRouteReturns(result1 repositories.RouteRecord, result2 error) {
	fake.fetchRouteMutex.Lock()
	defer fake.fetchRouteMutex.Unlock()
	fake.FetchRouteStub = nil
	fake.fetchRouteReturns = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchRouteReturnsOnCall(i int, result1 repositories.RouteRecord, result2 error) {
	fake.fetchRouteMutex.Lock()
	defer fake.fetchRouteMutex.Unlock()
	fake.FetchRouteStub = nil
	if fake.fetchRouteReturnsOnCall == nil {
		fake.fetchRouteReturnsOnCall = make(map[int]struct {
			result1 repositories.RouteRecord
			result2 error
		})
	}
	fake.fetchRouteReturnsOnCall[i] = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchRouteMutex.RLock()
	defer fake.fetchRouteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFRouteRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apis.CFRouteRepository = new(CFRouteRepository)
