// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-k8s-api/apis"
	"code.cloudfoundry.org/cf-k8s-api/repositories"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type CFAppRepository struct {
	AppExistsStub        func(context.Context, client.Client, string, string) (bool, error)
	appExistsMutex       sync.RWMutex
	appExistsArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
		arg4 string
	}
	appExistsReturns struct {
		result1 bool
		result2 error
	}
	appExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CreateAppStub        func(context.Context, client.Client, repositories.AppRecord) (repositories.AppRecord, error)
	createAppMutex       sync.RWMutex
	createAppArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.AppRecord
	}
	createAppReturns struct {
		result1 repositories.AppRecord
		result2 error
	}
	createAppReturnsOnCall map[int]struct {
		result1 repositories.AppRecord
		result2 error
	}
	CreateAppEnvironmentVariablesStub        func(context.Context, client.Client, repositories.AppEnvVarsRecord) (repositories.AppEnvVarsRecord, error)
	createAppEnvironmentVariablesMutex       sync.RWMutex
	createAppEnvironmentVariablesArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.AppEnvVarsRecord
	}
	createAppEnvironmentVariablesReturns struct {
		result1 repositories.AppEnvVarsRecord
		result2 error
	}
	createAppEnvironmentVariablesReturnsOnCall map[int]struct {
		result1 repositories.AppEnvVarsRecord
		result2 error
	}
	FetchAppStub        func(context.Context, client.Client, string) (repositories.AppRecord, error)
	fetchAppMutex       sync.RWMutex
	fetchAppArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
	}
	fetchAppReturns struct {
		result1 repositories.AppRecord
		result2 error
	}
	fetchAppReturnsOnCall map[int]struct {
		result1 repositories.AppRecord
		result2 error
	}
	FetchNamespaceStub        func(context.Context, client.Client, string) (repositories.SpaceRecord, error)
	fetchNamespaceMutex       sync.RWMutex
	fetchNamespaceArgsForCall []struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
	}
	fetchNamespaceReturns struct {
		result1 repositories.SpaceRecord
		result2 error
	}
	fetchNamespaceReturnsOnCall map[int]struct {
		result1 repositories.SpaceRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFAppRepository) AppExists(arg1 context.Context, arg2 client.Client, arg3 string, arg4 string) (bool, error) {
	fake.appExistsMutex.Lock()
	ret, specificReturn := fake.appExistsReturnsOnCall[len(fake.appExistsArgsForCall)]
	fake.appExistsArgsForCall = append(fake.appExistsArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.AppExistsStub
	fakeReturns := fake.appExistsReturns
	fake.recordInvocation("AppExists", []interface{}{arg1, arg2, arg3, arg4})
	fake.appExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFAppRepository) AppExistsCallCount() int {
	fake.appExistsMutex.RLock()
	defer fake.appExistsMutex.RUnlock()
	return len(fake.appExistsArgsForCall)
}

func (fake *CFAppRepository) AppExistsCalls(stub func(context.Context, client.Client, string, string) (bool, error)) {
	fake.appExistsMutex.Lock()
	defer fake.appExistsMutex.Unlock()
	fake.AppExistsStub = stub
}

func (fake *CFAppRepository) AppExistsArgsForCall(i int) (context.Context, client.Client, string, string) {
	fake.appExistsMutex.RLock()
	defer fake.appExistsMutex.RUnlock()
	argsForCall := fake.appExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CFAppRepository) AppExistsReturns(result1 bool, result2 error) {
	fake.appExistsMutex.Lock()
	defer fake.appExistsMutex.Unlock()
	fake.AppExistsStub = nil
	fake.appExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *CFAppRepository) AppExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.appExistsMutex.Lock()
	defer fake.appExistsMutex.Unlock()
	fake.AppExistsStub = nil
	if fake.appExistsReturnsOnCall == nil {
		fake.appExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.appExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *CFAppRepository) CreateApp(arg1 context.Context, arg2 client.Client, arg3 repositories.AppRecord) (repositories.AppRecord, error) {
	fake.createAppMutex.Lock()
	ret, specificReturn := fake.createAppReturnsOnCall[len(fake.createAppArgsForCall)]
	fake.createAppArgsForCall = append(fake.createAppArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.AppRecord
	}{arg1, arg2, arg3})
	stub := fake.CreateAppStub
	fakeReturns := fake.createAppReturns
	fake.recordInvocation("CreateApp", []interface{}{arg1, arg2, arg3})
	fake.createAppMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFAppRepository) CreateAppCallCount() int {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	return len(fake.createAppArgsForCall)
}

func (fake *CFAppRepository) CreateAppCalls(stub func(context.Context, client.Client, repositories.AppRecord) (repositories.AppRecord, error)) {
	fake.createAppMutex.Lock()
	defer fake.createAppMutex.Unlock()
	fake.CreateAppStub = stub
}

func (fake *CFAppRepository) CreateAppArgsForCall(i int) (context.Context, client.Client, repositories.AppRecord) {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	argsForCall := fake.createAppArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFAppRepository) CreateAppReturns(result1 repositories.AppRecord, result2 error) {
	fake.createAppMutex.Lock()
	defer fake.createAppMutex.Unlock()
	fake.CreateAppStub = nil
	fake.createAppReturns = struct {
		result1 repositories.AppRecord
		result2 error
	}{result1, result2}
}

func (fake *CFAppRepository) CreateAppReturnsOnCall(i int, result1 repositories.AppRecord, result2 error) {
	fake.createAppMutex.Lock()
	defer fake.createAppMutex.Unlock()
	fake.CreateAppStub = nil
	if fake.createAppReturnsOnCall == nil {
		fake.createAppReturnsOnCall = make(map[int]struct {
			result1 repositories.AppRecord
			result2 error
		})
	}
	fake.createAppReturnsOnCall[i] = struct {
		result1 repositories.AppRecord
		result2 error
	}{result1, result2}
}

func (fake *CFAppRepository) CreateAppEnvironmentVariables(arg1 context.Context, arg2 client.Client, arg3 repositories.AppEnvVarsRecord) (repositories.AppEnvVarsRecord, error) {
	fake.createAppEnvironmentVariablesMutex.Lock()
	ret, specificReturn := fake.createAppEnvironmentVariablesReturnsOnCall[len(fake.createAppEnvironmentVariablesArgsForCall)]
	fake.createAppEnvironmentVariablesArgsForCall = append(fake.createAppEnvironmentVariablesArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 repositories.AppEnvVarsRecord
	}{arg1, arg2, arg3})
	stub := fake.CreateAppEnvironmentVariablesStub
	fakeReturns := fake.createAppEnvironmentVariablesReturns
	fake.recordInvocation("CreateAppEnvironmentVariables", []interface{}{arg1, arg2, arg3})
	fake.createAppEnvironmentVariablesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFAppRepository) CreateAppEnvironmentVariablesCallCount() int {
	fake.createAppEnvironmentVariablesMutex.RLock()
	defer fake.createAppEnvironmentVariablesMutex.RUnlock()
	return len(fake.createAppEnvironmentVariablesArgsForCall)
}

func (fake *CFAppRepository) CreateAppEnvironmentVariablesCalls(stub func(context.Context, client.Client, repositories.AppEnvVarsRecord) (repositories.AppEnvVarsRecord, error)) {
	fake.createAppEnvironmentVariablesMutex.Lock()
	defer fake.createAppEnvironmentVariablesMutex.Unlock()
	fake.CreateAppEnvironmentVariablesStub = stub
}

func (fake *CFAppRepository) CreateAppEnvironmentVariablesArgsForCall(i int) (context.Context, client.Client, repositories.AppEnvVarsRecord) {
	fake.createAppEnvironmentVariablesMutex.RLock()
	defer fake.createAppEnvironmentVariablesMutex.RUnlock()
	argsForCall := fake.createAppEnvironmentVariablesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFAppRepository) CreateAppEnvironmentVariablesReturns(result1 repositories.AppEnvVarsRecord, result2 error) {
	fake.createAppEnvironmentVariablesMutex.Lock()
	defer fake.createAppEnvironmentVariablesMutex.Unlock()
	fake.CreateAppEnvironmentVariablesStub = nil
	fake.createAppEnvironmentVariablesReturns = struct {
		result1 repositories.AppEnvVarsRecord
		result2 error
	}{result1, result2}
}

func (fake *CFAppRepository) CreateAppEnvironmentVariablesReturnsOnCall(i int, result1 repositories.AppEnvVarsRecord, result2 error) {
	fake.createAppEnvironmentVariablesMutex.Lock()
	defer fake.createAppEnvironmentVariablesMutex.Unlock()
	fake.CreateAppEnvironmentVariablesStub = nil
	if fake.createAppEnvironmentVariablesReturnsOnCall == nil {
		fake.createAppEnvironmentVariablesReturnsOnCall = make(map[int]struct {
			result1 repositories.AppEnvVarsRecord
			result2 error
		})
	}
	fake.createAppEnvironmentVariablesReturnsOnCall[i] = struct {
		result1 repositories.AppEnvVarsRecord
		result2 error
	}{result1, result2}
}

func (fake *CFAppRepository) FetchApp(arg1 context.Context, arg2 client.Client, arg3 string) (repositories.AppRecord, error) {
	fake.fetchAppMutex.Lock()
	ret, specificReturn := fake.fetchAppReturnsOnCall[len(fake.fetchAppArgsForCall)]
	fake.fetchAppArgsForCall = append(fake.fetchAppArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FetchAppStub
	fakeReturns := fake.fetchAppReturns
	fake.recordInvocation("FetchApp", []interface{}{arg1, arg2, arg3})
	fake.fetchAppMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFAppRepository) FetchAppCallCount() int {
	fake.fetchAppMutex.RLock()
	defer fake.fetchAppMutex.RUnlock()
	return len(fake.fetchAppArgsForCall)
}

func (fake *CFAppRepository) FetchAppCalls(stub func(context.Context, client.Client, string) (repositories.AppRecord, error)) {
	fake.fetchAppMutex.Lock()
	defer fake.fetchAppMutex.Unlock()
	fake.FetchAppStub = stub
}

func (fake *CFAppRepository) FetchAppArgsForCall(i int) (context.Context, client.Client, string) {
	fake.fetchAppMutex.RLock()
	defer fake.fetchAppMutex.RUnlock()
	argsForCall := fake.fetchAppArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFAppRepository) FetchAppReturns(result1 repositories.AppRecord, result2 error) {
	fake.fetchAppMutex.Lock()
	defer fake.fetchAppMutex.Unlock()
	fake.FetchAppStub = nil
	fake.fetchAppReturns = struct {
		result1 repositories.AppRecord
		result2 error
	}{result1, result2}
}

func (fake *CFAppRepository) FetchAppReturnsOnCall(i int, result1 repositories.AppRecord, result2 error) {
	fake.fetchAppMutex.Lock()
	defer fake.fetchAppMutex.Unlock()
	fake.FetchAppStub = nil
	if fake.fetchAppReturnsOnCall == nil {
		fake.fetchAppReturnsOnCall = make(map[int]struct {
			result1 repositories.AppRecord
			result2 error
		})
	}
	fake.fetchAppReturnsOnCall[i] = struct {
		result1 repositories.AppRecord
		result2 error
	}{result1, result2}
}

func (fake *CFAppRepository) FetchNamespace(arg1 context.Context, arg2 client.Client, arg3 string) (repositories.SpaceRecord, error) {
	fake.fetchNamespaceMutex.Lock()
	ret, specificReturn := fake.fetchNamespaceReturnsOnCall[len(fake.fetchNamespaceArgsForCall)]
	fake.fetchNamespaceArgsForCall = append(fake.fetchNamespaceArgsForCall, struct {
		arg1 context.Context
		arg2 client.Client
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FetchNamespaceStub
	fakeReturns := fake.fetchNamespaceReturns
	fake.recordInvocation("FetchNamespace", []interface{}{arg1, arg2, arg3})
	fake.fetchNamespaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFAppRepository) FetchNamespaceCallCount() int {
	fake.fetchNamespaceMutex.RLock()
	defer fake.fetchNamespaceMutex.RUnlock()
	return len(fake.fetchNamespaceArgsForCall)
}

func (fake *CFAppRepository) FetchNamespaceCalls(stub func(context.Context, client.Client, string) (repositories.SpaceRecord, error)) {
	fake.fetchNamespaceMutex.Lock()
	defer fake.fetchNamespaceMutex.Unlock()
	fake.FetchNamespaceStub = stub
}

func (fake *CFAppRepository) FetchNamespaceArgsForCall(i int) (context.Context, client.Client, string) {
	fake.fetchNamespaceMutex.RLock()
	defer fake.fetchNamespaceMutex.RUnlock()
	argsForCall := fake.fetchNamespaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFAppRepository) FetchNamespaceReturns(result1 repositories.SpaceRecord, result2 error) {
	fake.fetchNamespaceMutex.Lock()
	defer fake.fetchNamespaceMutex.Unlock()
	fake.FetchNamespaceStub = nil
	fake.fetchNamespaceReturns = struct {
		result1 repositories.SpaceRecord
		result2 error
	}{result1, result2}
}

func (fake *CFAppRepository) FetchNamespaceReturnsOnCall(i int, result1 repositories.SpaceRecord, result2 error) {
	fake.fetchNamespaceMutex.Lock()
	defer fake.fetchNamespaceMutex.Unlock()
	fake.FetchNamespaceStub = nil
	if fake.fetchNamespaceReturnsOnCall == nil {
		fake.fetchNamespaceReturnsOnCall = make(map[int]struct {
			result1 repositories.SpaceRecord
			result2 error
		})
	}
	fake.fetchNamespaceReturnsOnCall[i] = struct {
		result1 repositories.SpaceRecord
		result2 error
	}{result1, result2}
}

func (fake *CFAppRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appExistsMutex.RLock()
	defer fake.appExistsMutex.RUnlock()
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	fake.createAppEnvironmentVariablesMutex.RLock()
	defer fake.createAppEnvironmentVariablesMutex.RUnlock()
	fake.fetchAppMutex.RLock()
	defer fake.fetchAppMutex.RUnlock()
	fake.fetchNamespaceMutex.RLock()
	defer fake.fetchNamespaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFAppRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apis.CFAppRepository = new(CFAppRepository)
